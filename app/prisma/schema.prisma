// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id            String  @id @default(uuid())
  nickname      String
  email         String?
  walletAddress String?
}

enum Network {
  ETHEREUM
  POLYGON
  GNOSIS
  BASE
  GOERLI
  SEPOLIA
}

enum NetworkStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Order {
  orderId               String         @id @default(uuid())
  campaignId            String
  collectionNetwork     Network
  collectionAddress     String
  selectedTokenId       String
  personalNote          String?
  transactionId         String?
  mintedTokenId         String?
  mintedNetworkId       Network?
  mintedContractAddress String?
  // cron job updates the following, based on the txId
  status                NetworkStatus?
  // FULFILMENT ATTRIBUTES
  autographData         String?
  autographDataURL      String?
  metadataUrl           String? // after uploading to a decentralised storage
  // TO UPLOAD
  nftImageURL           String?
  toUpload              String? // the generated image that the collector will see
}

model Campaign {
  campaignId                     String   @id @default(uuid())
  createdAt                      DateTime @default(now())
  networkId                      Network  @default(ETHEREUM)
  defaultURI                     String?
  binderContract                 String?
  manifestUrl                    String?
}

model CampaignWhiteList {
  campaignId                     String  
  createdAt                      DateTime @default(now())
  networkId                      Network  @default(ETHEREUM)
  contractAddress String
  tokenId         String @default("") // empty string means all tokens
  @@unique([campaignId, networkId, contractAddress, tokenId])
}

model Nft {
  networkId       Network @default(ETHEREUM)
  contractAddress String
  tokenId         String
  tokenUri        String?

  @@unique([networkId, contractAddress, tokenId])
}
